generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum Role {
    SUPERADMIN
    ADMIN
    EMPLOYEE
}

enum Province {
    OTRO
    ALAVA
    ALBACETE
    ALICANTE
    ALMERIA
    ASTURIAS
    AVILA
    BADAJOZ
    BARCELONA
    BURGOS
    CACERES
    CADIZ
    CANTABRIA
    CASTELLON
    CIUDAD_REAL
    CORDOBA
    LA_CORUNA
    CUENCA
    GERONA
    GRANADA
    GUADALAJARA
    GUIPUZCOA
    HUELVA
    HUESCA
    ISLAS_BALEARES
    JAEN
    LEON
    LERIDA
    LUGO
    MADRID
    MALAGA
    MURCIA
    NAVARRA
    ORENSE
    PALENCIA
    LAS_PALMAS
    PONTEVEDRA
    LA_RIOJA
    SALAMANCA
    SEGOVIA
    SEVILLA
    SORIA
    TARRAGONA
    SANTA_CRUZ_DE_TENERIFE
    TERUEL
    TOLEDO
    VALENCIA
    VALLADOLID
    VIZCAYA
    ZAMORA
    ZARAGOZA
}

enum PreferredCommunication {
    WHATSAPP
    SMS
    EMAIL
    PHONE
}

enum FileType {
    DOC
    EXCEL
    PDF
    IMG
    VIDEO
    OTRO
}

enum FixedDocType {
    FICHA
    HISTORIAL_CLINICO
    VISCERAL_CRANEAL
}

enum DateAdvance {
    TRUE
    FALSE
}

enum BodyPart {
    PELVIS
    COLUMNA
    CLAVICULA
    RODILLA
    FS
    ES
    CERVICALES
    OTRA
}

enum SubBodyPart {
    LFX
    I
    ILI
    F
    E
    RO
    H
    IZQ
    DCH
    TRS
    OTRO
}

model User {
    id            String         @id @default(uuid())
    email         String         @unique
    name          String
    lastName      String
    password      String
    role          Role           @default(EMPLOYEE)
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    appointments  Date[]
    lastPasswords LastPassword[]
}

model LastPassword {
    id       String @id @unique @default(uuid())
    userId   String
    password String
    user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Customer {
    id                     String                  @id @unique @default(uuid())
    fullName               String?
    age                    Int?
    weight                 Int?
    height                 Int?
    profession             String?
    province               Province?
    population             String?
    cD                     Int?
    address                String?
    emailAddress           String?
    children               Int?
    observationChildren    String?
    dateBirth              DateTime?
    preferredCommunication PreferredCommunication? @default(SMS)
    docs                   Doc[]
    appointments           Date[]
    phones                 PhoneNumber[]
}

model Date {
    id              String      @id @unique @default(uuid())
    citaDate        DateTime
    userId          String
    customerId      String
    advance_date    DateAdvance @default(FALSE)
    urgent_date     Boolean?
    time            Int
    dateObservation String?
    sessionPrice    Int?
    user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
    customer        Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    Ficha           Ficha[]
}

model PhoneNumber {
    id                   String   @id @unique @default(uuid())
    customerId           String
    countryCode          String   @default("+34")
    phoneNumber          BigInt
    isCommunicationPhone Boolean  @default(false)
    customer             Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Doc {
    id         String       @id @unique @default(uuid())
    typeDoc    FileType
    fixedType  FixedDocType
    customerId String
    file       String?
    fileName   String?
    customer   Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)
    Fichas     Ficha[]
}

model Ficha {
    id              String               @id @unique @default(uuid())
    dateFichaId     String?
    docId           String
    observations    String?
    treatmentPlan   String?
    bodyAssessments BodyPartAssessment[]
    doc             Doc                  @relation(fields: [docId], references: [id], onDelete: Cascade)
    date            Date?                 @relation(fields: [dateFichaId], references: [id], onDelete: Cascade)
}

model BodyPartAssessment {
    id          String      @id @unique @default(uuid())
    fichaId     String
    bodyPart    BodyPart
    subBodyPart SubBodyPart
    description String
    ficha       Ficha       @relation(fields: [fichaId], references: [id], onDelete: Cascade)
}
